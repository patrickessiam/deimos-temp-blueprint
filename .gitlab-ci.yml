image: jangrewe/gitlab-ci-android

stages:
  - initialize
  - test
  - build

cache:
  key: ${CI_PROJECT_ID}
  paths:
    - .gradle/
#cache:
#  paths:
#    - .gradle/

variables:
  ANDROID_COMPILE_SDK: "33"
  ANDROID_BUILD_TOOLS: "33.0.1"
  ANDROID_SDK_TOOLS: "9477386"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

# These two lines of code containerize the jobs. I will explore this later when I am
# working on the fix for the generation of the APKs.
#  DOCKER_MEMORY_LIMIT: "2g"
#  DOCKER_SWAP_LIMIT: "2g"

before_script:
  - chmod +x ./gradlew
  - export GRADLE_USER_HOME=$PWD/.gradle

#  - apt-get --quiet update --yes
#  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
#  # Setup path as android_home for moving/exporting the downloaded sdk into it
#  - export ANDROID_HOME="${PWD}/android-home"
#  # Create a new directory at specified location
#  - install -d $ANDROID_HOME
#  # Here we are installing androidSDK tools from official source,
#  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
#  # after that unzipping those tools and
#  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
#  - wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
#  # move to the archive at ANDROID_HOME
#  - pushd $ANDROID_HOME
#  - unzip -d cmdline-tools cmdline-tools.zip
#  - pushd cmdline-tools
#  # since commandline tools version 7583922 the root folder is named "cmdline-tools" so we rename it if necessary
#  - mv cmdline-tools tools || true
#  - popd
#  - popd
#  - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/tools/bin/
#
#  # Nothing fancy here, just checking sdkManager version
#  - sdkmanager --version
#
#  # use yes to accept all licenses
#  - yes | sdkmanager --licenses || true
#  - sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
#  - sdkmanager "platform-tools"
#  - sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"

  # allocate memory to Gradle Daemon
  - export GRADLE_OPTS="-Xmx4096m"

# this job checks the number of changed files in the merge request
check_changed_files:
  stage: initialize
  script:
    - |
      git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
      changed_files_count=$(git diff-tree --name-only -r "HEAD..origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" | wc -l)
      echo "Number of changed files: $changed_files_count"
      if [ "$changed_files_count" -gt 20 ]; then
        echo "Too many files changed - maximum is 20";
        exit 1;
      fi
    - |
  only:
    - merge_requests

# this job runs static analysis on the code when a merge request is created
static_analysis:
  stage: initialize
  script:
    - ./gradlew detekt
  only:
    - merge_requests

# DISABLED TEMPORARILY TO MERGE OTHER PRs ASAP
# this job builds a debug apk when a PR is merged into main
#build:
#  stage: build
#  script:
#    - ./gradlew assembleDebug --stacktrace
#  artifacts:
#    paths:
#      - app/build/outputs/
#  only:
#    - pushes

# this job runs unit tests when a merge request is created
unitTests:
  stage: test
  script:
    - ./gradlew test
  only:
    - merge_requests

# this job does a vulnerability scan when a merge request is created
vulnerabilityScan:
  stage: test
  script:
    - ./gradlew dependencyCheckAggregate
  only:
    - merge_requests
  allow_failure: true

# this job runs all tests in the presentation module
presentationJacocoTestReport:
  stage: test
  script:
    - ./gradlew presentation:koverHtmlReportDevelopmentDebug
  artifacts:
    paths:
      - presentation/build/reports/
  only:
    - merge_requests

# this job runs all tests in the data module
dataJacocoTestReport:
  stage: test
  script:
    - ./gradlew data:koverHtmlReportDevelopmentDebug
  artifacts:
    paths:
      - data/build/reports/
  only:
    - merge_requests

# this job runs all tests in the domain module
domainJacocoTestReport:
  stage: test
  script:
    - ./gradlew domain:koverHtmlReport
  artifacts:
    paths:
      - domain/build/reports/
  only:
    - merge_requests

# this job runs all jacoco tests in parallel to save time
runJacocoTestReportsInParallel:
  stage: test
  needs:
    - unitTests
  script:
    - echo "Running jobs in parallel"
  parallel:
    matrix:
      - JOB: presentationJacocoTestReport
      - JOB: dataJacocoTestReport
      - JOB: domainJacocoTestReport
  only:
    - merge_requests

# this job runs all tests in the app module and generates a jacoco report that is consolidated with the
# reports from the other modules. The app module is configured as our main module.
appJacocoTestReport:
  stage: test
  needs:
    - runJacocoTestReportsInParallel
  script:
    - ./gradlew app:koverHtmlReport
  artifacts:
    paths:
      - app/build/reports/
  only:
    - merge_requests

# this job checks the actual code coverage that the project has against the expected percentage
verifyCodeCoverageReport:
  stage: test
  needs:
    - appJacocoTestReport
  script:
    - ./gradlew app:koverVerify
  only:
    - merge_requests

# TODO add rule to run on merge to sampleApp branch
#assembleDebug:
#  stage: build
#  script:
#    - ./gradlew assembleDevelopmentDebug
#  artifacts:
#    expire_in: 2 hours
#    paths:
#    - app/build/outputs/apk/
#  only:
#    - pushes
#  timeout: 2 hours

#preAssembleRelease:
#  stage: build
#  script:
#    - echo "$RELEASE_KEYSTORE" | base64 -d > android-keystore.jks
#    - echo "ANDROID_KEYSTORE_FILE=android-keystore.jks" > production.properties
#    - echo "$ANDROID_KEYSTORE_PASSWORD" >> production.properties
#    - echo "$ANDROID_KEY_ALIAS" >> production.properties
#    - echo "$KEY_PASSWORD" >> production.properties
#    - cp production.properties app/production.properties
#    - cp android-keystore.jks app/android-keystore.jks
#  artifacts:
#    paths:
#      - app/build/outputs/apk/release
#      - app/android-keystore.jks
#      - app/production.properties
#    expire_in: 2 hours
#  only:
#    - pushes

assembleRelease:
  stage: build
  script:
    - echo "$RELEASE_KEYSTORE" | base64 -d > android-keystore.jks
    - echo "ANDROID_KEYSTORE_FILE=android-keystore.jks" > production.properties
    - echo "keystorePassword=$ANDROID_KEYSTORE_PASSWORD" >> production.properties
    - echo "keyAlias=$ANDROID_KEY_ALIAS" >> production.properties
    - echo "keyPassword=$KEY_PASSWORD" >> production.properties
    - cp production.properties app/production.properties
    - cp android-keystore.jks app/android-keystore.jks
    - keytool -list -v -keystore app/android-keystore.jks -storepass $ANDROID_KEYSTORE_PASSWORD
    - echo "$ANDROID_KEYSTORE_PASSWORD" | keytool -list -keystore "$PWD/android-keystore.jks" -alias $ANDROID_KEY_ALIAS || echo "Failed to sign the APK"
    - ./gradlew assembleProductionRelease -Pandroid.injected.signing.store.file=android-keystore.jks -Pandroid.injected.signing.store.password=AndroidBluePrint1234 -Pandroid.injected.signing.key.alias=keyAlias -Pandroid.injected.signing.key.password=keyPassword
  artifacts:
    paths:
      - app/build/outputs/apk/release
      - app/android-keystore.jks
      - app/production.properties
    expire_in: 2 hours
#  needs:
#    - preAssembleRelease
  only:
    - pushes